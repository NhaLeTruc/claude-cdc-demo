global:
  resolve_timeout: 5m
  smtp_smarthost: 'localhost:25'
  smtp_from: 'alertmanager@cdc-demo.local'
  smtp_require_tls: false

# Templates for alert notifications
templates:
  - '/etc/alertmanager/templates/*.tmpl'

# Route tree for alert notifications
route:
  # Default receiver for all alerts
  receiver: 'default-receiver'

  # Group alerts by these labels
  group_by: ['alertname', 'cluster', 'service']

  # Wait time before sending first notification
  group_wait: 10s

  # Wait time before sending subsequent notifications for the same group
  group_interval: 10s

  # Wait time before repeating a notification
  repeat_interval: 3h

  # Route configuration for different alert types
  routes:
    # Critical alerts - immediate notification
    - match:
        severity: critical
      receiver: 'critical-alerts'
      continue: true
      group_wait: 5s
      repeat_interval: 1h

    # CDC pipeline alerts
    - match:
        component: cdc_pipeline
      receiver: 'cdc-team'
      continue: true

    # Debezium connector alerts
    - match:
        component: debezium
      receiver: 'cdc-team'
      continue: true

    # Data quality alerts
    - match:
        component: data_quality
      receiver: 'data-quality-team'
      continue: true

    # Infrastructure alerts
    - match:
        component: infrastructure
      receiver: 'ops-team'
      continue: true

# Inhibition rules - suppress certain alerts when others are firing
inhibit_rules:
  # Suppress warning alerts if critical alert for same service is firing
  - source_match:
      severity: 'critical'
    target_match:
      severity: 'warning'
    equal: ['alertname', 'pipeline']

  # Suppress lag alerts if connector is down
  - source_match:
      alertname: 'ConnectorFailure'
    target_match:
      alertname: 'HighCDCLag'
    equal: ['pipeline']

  # Suppress data quality alerts if service is down
  - source_match:
      alertname: 'ServiceDown'
    target_match:
      component: 'data_quality'
    equal: ['service']

# Receivers define notification destinations
receivers:
  # Default receiver (logs to stdout)
  - name: 'default-receiver'
    webhook_configs:
      - url: 'http://localhost:9999/webhook'
        send_resolved: true

  # Critical alerts receiver (multiple channels)
  - name: 'critical-alerts'
    # Email notifications
    email_configs:
      - to: 'cdc-alerts@example.com'
        headers:
          Subject: '[CRITICAL] CDC Alert: {{ .GroupLabels.alertname }}'
        html: |
          <h2>Critical CDC Alert</h2>
          <p><strong>Alert:</strong> {{ .GroupLabels.alertname }}</p>
          <p><strong>Severity:</strong> {{ .CommonLabels.severity }}</p>
          <p><strong>Summary:</strong> {{ .CommonAnnotations.summary }}</p>
          <p><strong>Description:</strong> {{ .CommonAnnotations.description }}</p>
          <p><strong>Time:</strong> {{ .StartsAt }}</p>

    # Slack notifications (configure webhook URL)
    slack_configs:
      - api_url: 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK'
        channel: '#cdc-critical-alerts'
        title: 'Critical CDC Alert'
        text: |
          *Alert:* {{ .GroupLabels.alertname }}
          *Severity:* {{ .CommonLabels.severity }}
          *Summary:* {{ .CommonAnnotations.summary }}
          *Description:* {{ .CommonAnnotations.description }}
        send_resolved: true

    # PagerDuty integration (configure integration key)
    pagerduty_configs:
      - service_key: 'YOUR_PAGERDUTY_SERVICE_KEY'
        description: '{{ .GroupLabels.alertname }} - {{ .CommonAnnotations.summary }}'

  # CDC team receiver
  - name: 'cdc-team'
    email_configs:
      - to: 'cdc-team@example.com'
        headers:
          Subject: '[CDC] {{ .GroupLabels.alertname }}'

    slack_configs:
      - api_url: 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK'
        channel: '#cdc-alerts'
        title: 'CDC Pipeline Alert'
        text: |
          *Alert:* {{ .GroupLabels.alertname }}
          *Pipeline:* {{ .CommonLabels.pipeline }}
          *Summary:* {{ .CommonAnnotations.summary }}
        send_resolved: true

  # Data quality team receiver
  - name: 'data-quality-team'
    email_configs:
      - to: 'data-quality@example.com'
        headers:
          Subject: '[DATA QUALITY] {{ .GroupLabels.alertname }}'

    slack_configs:
      - api_url: 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK'
        channel: '#data-quality'
        title: 'Data Quality Alert'
        text: |
          *Alert:* {{ .GroupLabels.alertname }}
          *Validator:* {{ .CommonLabels.validator }}
          *Summary:* {{ .CommonAnnotations.summary }}
        send_resolved: true

  # Operations team receiver
  - name: 'ops-team'
    email_configs:
      - to: 'ops-team@example.com'
        headers:
          Subject: '[OPS] {{ .GroupLabels.alertname }}'

    slack_configs:
      - api_url: 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK'
        channel: '#ops-alerts'
        title: 'Infrastructure Alert'
        text: |
          *Alert:* {{ .GroupLabels.alertname }}
          *Service:* {{ .CommonLabels.job }}
          *Summary:* {{ .CommonAnnotations.summary }}
        send_resolved: true

    # Webhook for custom integrations
    webhook_configs:
      - url: 'http://your-ops-system.com/webhook'
        send_resolved: true
